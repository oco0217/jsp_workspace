package controller;

import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileItemFactory;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.BoardVO;
import domain.MemberVO;
import domain.PagingVO;
import handler.FileRemoveHandler;
import handler.PagingHandler;
import net.coobird.thumbnailator.Thumbnails;
import service.BoardService;
import service.BoardServiceImple;

/**
 * Servlet implementation class BoardController
 */
@WebServlet("/brd/*")
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger log = LoggerFactory.getLogger(BoardController.class);
	private RequestDispatcher rdp;
	private String destPage;
	private int isOk;
	private BoardService bsv;
	private String savePath; // 파일 업로드 저장 경로

	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public BoardController() {
		bsv = new BoardServiceImple();
	}

	/**
	 * @see HttpServlet#service(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void service(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html; charset=UTF-8");

		String uri = request.getRequestURI();
		String path = uri.substring(uri.lastIndexOf("/") + 1);

		log.info(uri);
		log.info(path);

		switch (path) {

		case "register":
			destPage = "/board/register.jsp";
			break;

		case "insert":
			try {

				// 파일을 업로드할 물리적인 경로 설정
				savePath = getServletContext().getRealPath("/_fileUpload");
				log.info("savePath>>>>>>>>>>>>>>>>>{}", savePath);

				File fileDir = new File(savePath); // 껍데기 만들기
				log.info("saveDir>>>>>>>>>>>>>>>>>{}", fileDir);

				DiskFileItemFactory fileItemFactory = new DiskFileItemFactory();
				fileItemFactory.setRepository(fileDir); // 저장할 위치를 file 객체로 지정
				fileItemFactory.setSizeThreshold(1024 * 1024 * 3); // 파일 저장을 위한 임시 메모리

				BoardVO bvo = new BoardVO();

				// 비트단위로 오는 이미지파일을 text형태로 바꿔줌 / multipart/form-data 형식으로 넘어온 request 객체를 다루기 쉽게
				// 변환해주는 역할
				ServletFileUpload fileUpload = new ServletFileUpload(fileItemFactory);

				List<FileItem> itemList = fileUpload.parseRequest(request);

				for (FileItem item : itemList) {
					// title, writer, content = > text imageFile => image
					switch (item.getFieldName()) {
					case "title":
						// 파일이 다시 들어올때 타입이 초기화 되기 떄문에 다시 설정
						String title = item.getString("utf-8");
						bvo.setTitle(title);
						break;
					case "writer":
						bvo.setWriter(item.getString("utf-8"));
						break;
					case "content":
						bvo.setContent(item.getString("utf-8"));
						break;
					case "imageFile":
						// 이미지가 있는지 없는지부터 체크(이미지 파일 여부 체크)
						if (item.getSize() > 0) {
							// 파일 이름 추출
							// 파일의 getName()은 순수 파일이름 과 경로가 같이 있을수 있다. => 경로는 빼주어야 한다. Ex> 경로~~/dog.jpg
							String fileName = item.getName().substring(item.getName().lastIndexOf(File.separator) + 1); // 운영체제에
																														// 맞는
																														// separator로
																														// 적용시켜준다.
							// File.separator : 파일 경로 기호 => 운영체제마다 다를 수 있어서 자동 변환
							// 시스템의 시간을 이용해서 파일을 구분 / 시간_dog.jpg
							fileName = System.currentTimeMillis() + "_" + fileName;

							File uploadFilePath = new File(fileDir + File.separator + fileName);
							log.info(">>>>uploadFilePath>>>>>{}", uploadFilePath);
							// 저장
							try {
								item.write(uploadFilePath);
								bvo.setImageFile(fileName); // bvo에 저장할 값 (DB에 저장할 값)

								// 썸네일 작업 : 리스트 페이지에서 트레픽 과다사용을 방지하기 위해서
								Thumbnails.of(uploadFilePath).size(75, 75)
										.toFile(new File(fileDir + File.separator + "_th_" + fileName));
							} catch (Exception e) {
								log.info(">>>File writer on disk error");
								e.printStackTrace();
							}

						}
					}

				}

				isOk = bsv.insert(bvo);
				log.info(path + " " + (isOk > 0 ? "성공" : "실패"));

				if (isOk > 0) {
					request.setAttribute("insertMsg", "ok");
				}
				destPage = "list";

				log.info(">>>>>>bvo>>>>>>{}", bvo);

				// 첨부파일이 없는 multi
//				String title = request.getParameter("title");
//				String content = request.getParameter("content");
//				String writer = request.getParameter("writer");							
//				BoardVO bvo = new BoardVO(title, writer, content);
//
//				isOk = bsv.insert(bvo);
//
//				log.info(path + " " + (isOk > 0 ? "성공" : "실패"));
//
//				if (isOk > 0) {
//					request.setAttribute("insertMsg", "ok");
//				}
//				destPage = "list";

			} catch (Exception e) {
				e.printStackTrace();
			}
			break;

		case "list":
		case "myList":
			try {

				HttpSession address = request.getSession();
				address.setAttribute("address", path);

				// Paging 객체 설정

				PagingVO pgvo = new PagingVO(); // 1 / 10 / 0 /type / keyword

				if (request.getParameter("pageNo") != null) {

					int pageNo = Integer.parseInt(request.getParameter("pageNo"));
					int qty = Integer.parseInt(request.getParameter("qty"));

					String type = request.getParameter("type");
					String keyword = request.getParameter("keyword");

					pgvo = new PagingVO(pageNo, qty, type, keyword);

				}

				if (path.equals("list")) {

					// 페이징을 반영한 리스트 추출
					List<BoardVO> list = bsv.getList(pgvo);

					// totalCount DB에서 검색해서 가져오기
					int totalCount = bsv.getTotal(pgvo);
					log.info(">>>>>>>TotalCount>>>>>{}", totalCount);
					PagingHandler ph = new PagingHandler(pgvo, totalCount);

					request.setAttribute("list", list);
					request.setAttribute("ph", ph);
					log.info(">>>>>>>TotalCount>>>>>{}", ph);
					log.info(">>>>>>리스트길이 >>>>>>{}", list.size());
				}

				// 내페이지만 볼 경우
				if (path.equals("myList")) {
					HttpSession ses = request.getSession();
					String id = ((MemberVO) ses.getAttribute("ses")).getId();
					// log.info(">>>>myList ID 추출 값 : {}",id);
					List<BoardVO> list = bsv.getList(id);
					int totalCount = bsv.getTotal(pgvo);
					PagingHandler ph = new PagingHandler(pgvo, totalCount);

					request.setAttribute("list", list);
					request.setAttribute("ph", ph);
				}

				destPage = "/board/list.jsp";

			} catch (Exception e) {
				e.printStackTrace();
			}
			break;

		case "detail":
		case "modify":
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				log.info("bno 확인 : {}", bno);
				BoardVO bvo = bsv.selectOne(bno);
				request.setAttribute("bvo", bvo);

				destPage = "/board/" + path + ".jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;

		case "update":
			try {
				
				savePath = getServletContext().getRealPath("/_fileUpload");
				File fileDir = new File(savePath);
				
				DiskFileItemFactory fileItemFactory = new DiskFileItemFactory();
				fileItemFactory.setRepository(fileDir);
				fileItemFactory.setSizeThreshold(1024*1024*3);
				
				BoardVO bvo = new BoardVO();
				
				ServletFileUpload fileUpload = new ServletFileUpload(fileItemFactory);
				
				List<FileItem> itemList = fileUpload.parseRequest(request);
				
				
				String old_file = null;
				
				for(FileItem item : itemList) {
					switch(item.getFieldName()) {
					case "bno" :
						bvo.setBno(Integer.parseInt(item.getString("utf-8")));
						break;
					case "title" :
						bvo.setTitle(item.getString("utf-8"));
						break;
					case "content" :
						bvo.setContent(item.getString("utf-8"));
						break;
					case "imageFile" :
						//기존파일 => 있을 수도 있고, 없을 수도 있음.
						old_file = item.getString("utf-8");
						break;
					case "newFile" :
						//새로 추가된 파일 => 있을 수도 있고, 없을 수도 있음.
						if(item.getSize()>0) {
							//새로운 등록 파일이 있다면...
							if(old_file != null) {
								//old_File 삭제작업
								//FileRemoveHandler 통해서 파일 삭제 작업 진행
								FileRemoveHandler fileHandler = new FileRemoveHandler();
								int isOk = fileHandler.deleteFile(path, old_file);
								
							}
							//새로운 파일 등록작업
							String fileName = item.getName()
									.substring(item.getName().lastIndexOf(File.separator)+1);
							log.info(">>>>>>>>>>>>>>>>new FIle Name>>>{}",fileName);
							
							fileName = System.currentTimeMillis()+"_"+fileName;
							File uploadFilePath = new File(fileDir+File.separator+fileName);
							
							try {
								item.write(uploadFilePath);
								bvo.setImageFile(fileName);
								
								Thumbnails.of(uploadFilePath)
								.size(75, 75)
								.toFile(new File(fileDir+File.separator+"_th_"+fileName));
							} catch (Exception e) {
								log.info("FIle Writer Update Error");
								e.printStackTrace();
							}
							
							
						}else {
							//기존 파일은 있지만, 새로운 이미지 파일이 없다면....
							bvo.setImageFile(old_file); //기존 객체에 bvo담기;
						}
						break;
					}
				}
								

				isOk = bsv.update(bvo);

				log.info("update " + (isOk>0?"성공":"실패"));
				
				destPage = "list";
				
				
				
				//이미지 파일 없을 때 케이스
//				int bno = Integer.parseInt(request.getParameter("bno"));
//				String title = request.getParameter("title");
//				String content = request.getParameter("content");
//
//				BoardVO bvo = new BoardVO(bno, title, content);
//
//				isOk = bsv.update(bvo);
//
//				destPage = "list";

			} catch (Exception e) {
				e.printStackTrace();
			}
			break;

		case "delete":
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				//댓글, 파일도 같이 삭제
				//bno주고 파일이름 찾아오기(DB에서)
				//찾아온 이름이 있다면... FileRemoveHandler를 이용하여 삭제
				
				//해당 bno로 댓글 삭제 요청 => servicImple에서 cdao에게 요청

				
				String imageFileName = bsv.getFileName(bno);
				
				log.info("파일이름>>>>{}",imageFileName);
				
				int isDel = 0;
				
				if(imageFileName != null) {
					
					
					
				}

					

						
//						fileName = item.getString("utf-8");
						
						
//						FileRemoveHandler fileHandler = new FileRemoveHandler();
//						
//						int isOk = fileHandler.deleteFile(path, fileName);
						
						

					
				
				

//				isOk = bsv.delete(bno);
//
				destPage = "list";

			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		}

		rdp = request.getRequestDispatcher(destPage);
		rdp.forward(request, response);

	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		service(request, response);
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		service(request, response);
	}

}
